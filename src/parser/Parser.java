/* Generated By:JavaCC: Do not edit this line. Parser.java */
package parser;

import syntax.Node;
import syntax.StartNode;
import syntax.ActionNode;
import syntax.ActionsNode;
import syntax.CloneNode;
import syntax.DefinitionNode;
import syntax.ExecNode;
import syntax.HostNodeNode;
import syntax.MigrateNode;
import syntax.ParamsNode;
import syntax.ReportNode;
import syntax.RunNode;
import syntax.ComputeNode;


public class Parser implements ParserConstants {

  final public Node main() throws ParseException {
  Node e;
    e = start();
    jj_consume_token(0);
                        {if (true) return e;}
    throw new Error("Missing return statement in function");
  }

  final public Node start() throws ParseException {
 DefinitionNode def; ExecNode exec; boolean repfinal = false;
    jj_consume_token(DEFINITION);
    jj_consume_token(OBRACE);
    def = agentDefinition();
    jj_consume_token(CBRACE);
    jj_consume_token(SEMICOL);
    jj_consume_token(EXECUTE);
    jj_consume_token(OBRACE);
    exec = exec(new ExecNode());
    jj_consume_token(CBRACE);
    jj_consume_token(SEMICOL);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case REPFINAL:
      jj_consume_token(REPFINAL);
                   repfinal = true;
      break;
    default:
      jj_la1[0] = jj_gen;
      ;
    }
          {if (true) return new StartNode(def, exec, repfinal);}
    throw new Error("Missing return statement in function");
  }

  final public DefinitionNode agentDefinition() throws ParseException {
 Token aID, author, authMail, date, comment, obs;
    jj_consume_token(AGENTID);
    jj_consume_token(DPOINT);
    aID = jj_consume_token(STRING);
    jj_consume_token(AUTHOR);
    jj_consume_token(DPOINT);
    author = jj_consume_token(STRING);
    jj_consume_token(AUTHMAIL);
    jj_consume_token(DPOINT);
    authMail = jj_consume_token(STRING);
    jj_consume_token(DATE);
    jj_consume_token(DPOINT);
    date = jj_consume_token(DATE_STRING);
    jj_consume_token(COMMENT);
    jj_consume_token(DPOINT);
    comment = jj_consume_token(STRING);
    jj_consume_token(OBS);
    jj_consume_token(DPOINT);
    obs = jj_consume_token(STRING);
                {if (true) return new DefinitionNode(aID.image,author.image,authMail.image,date.image,comment.image,obs.image);}
    throw new Error("Missing return statement in function");
  }

  final public ExecNode exec(ExecNode exec) throws ParseException {
 MigrateNode migrate;boolean trace = false; ActionsNode actions; ReportNode report=null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case COMPUTE:
      jj_consume_token(COMPUTE);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case TRACE:
        jj_consume_token(TRACE);
                               trace = true;
        break;
      default:
        jj_la1[1] = jj_gen;
        ;
      }
      jj_consume_token(OBRACE);
      actions = actions(new ActionsNode());
      jj_consume_token(CBRACE);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case REPFINAL:
      case REPCALLBACK:
      case REPMAIL:
        report = report();
        break;
      default:
        jj_la1[2] = jj_gen;
        ;
      }
      jj_consume_token(SEMICOL);
   exec = new ExecNode(new ComputeNode(trace,actions,report));
      break;
    default:
      jj_la1[4] = jj_gen;
      label_1:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case MIGRATE:
          ;
          break;
        default:
          jj_la1[3] = jj_gen;
          break label_1;
        }
        migrate = migrate();
        jj_consume_token(SEMICOL);
                        exec.addNode(migrate);
      }
    }
          {if (true) return exec;}
    throw new Error("Missing return statement in function");
  }

  final public MigrateNode migrate() throws ParseException {
 HostNodeNode host; ActionsNode actions; ReportNode report=null; boolean trace = false, output=false;
    jj_consume_token(MIGRATE);
    jj_consume_token(TO);
    host = hostNode();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case TRACE:
      jj_consume_token(TRACE);
                                                    trace = true;
      break;
    default:
      jj_la1[5] = jj_gen;
      ;
    }
    jj_consume_token(OBRACE);
    actions = actions(new ActionsNode());
    jj_consume_token(CBRACE);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case REPFINAL:
    case REPCALLBACK:
    case REPMAIL:
    case OUTPUT:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case REPFINAL:
      case REPCALLBACK:
      case REPMAIL:
        report = report();
        break;
      case OUTPUT:
        jj_consume_token(OUTPUT);
                                                                                               output = true;
        break;
      default:
        jj_la1[6] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      jj_la1[7] = jj_gen;
      ;
    }
    {if (true) return new MigrateNode(host,actions,trace,report,output);}
    throw new Error("Missing return statement in function");
  }

  final public Node compute() throws ParseException {
    {if (true) return null;}
    throw new Error("Missing return statement in function");
  }

  final public ActionsNode actions(ActionsNode actions) throws ParseException {
 ActionNode action;
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CLONE:
      case RUN:
        ;
        break;
      default:
        jj_la1[8] = jj_gen;
        break label_2;
      }
      action = action(new ActionNode());
                        actions.addNode(action);
    }
        {if (true) return actions;}
    throw new Error("Missing return statement in function");
  }

  final public ActionNode action(ActionNode action) throws ParseException {
  Node subAction; ParamsNode params=null; ExecNode exec; Token classname, urldir = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case CLONE:
      jj_consume_token(CLONE);
      exec = exec(new ExecNode());
                                              subAction = new CloneNode(exec);
      break;
    case RUN:
      jj_consume_token(RUN);
      classname = jj_consume_token(CLASSNAME);
      jj_consume_token(LPAR);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case STRING:
        params = params();
        break;
      default:
        jj_la1[9] = jj_gen;
        ;
      }
      jj_consume_token(RPAR);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case FROM:
        jj_consume_token(FROM);
        urldir = jj_consume_token(STRING);
        break;
      default:
        jj_la1[10] = jj_gen;
        ;
      }
       subAction = new RunNode(classname.image,params,urldir!=null ? urldir.image : null);
      break;
    default:
      jj_la1[11] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
                  action.addNode(subAction);
    {if (true) return action;}
    throw new Error("Missing return statement in function");
  }

  final public ReportNode report() throws ParseException {
        Token t=null; String type;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case REPCALLBACK:
      jj_consume_token(REPCALLBACK);
                             type = "callback" ;
      break;
    case REPMAIL:
      jj_consume_token(REPMAIL);
      t = jj_consume_token(STRING);
                                      type = "mail";
      break;
    case REPFINAL:
      jj_consume_token(REPFINAL);
      t = jj_consume_token(STRING);
                                      type = "repfinal";
      break;
    default:
      jj_la1[12] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
                {if (true) return new ReportNode(type, t != null ? t.image : null );}
    throw new Error("Missing return statement in function");
  }

  final public HostNodeNode hostNode() throws ParseException {
  Token t;
    t = jj_consume_token(STRING);
    {if (true) return new HostNodeNode(t.image);}
    throw new Error("Missing return statement in function");
  }

  final public ParamsNode params() throws ParseException {
  Token t; ParamsNode params = new ParamsNode();
    t = jj_consume_token(STRING);
                  params.addParam(t.image);
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[13] = jj_gen;
        break label_3;
      }
      jj_consume_token(COMMA);
      t = jj_consume_token(STRING);
                            params.addParam(t.image);
    }
    {if (true) return params;}
    throw new Error("Missing return statement in function");
  }

  /** Generated Token Manager. */
  public ParserTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private int jj_gen;
  final private int[] jj_la1 = new int[14];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x80,0x10000,0x600080,0x4000,0x100000,0x10000,0x600080,0x600080,0x60000,0x0,0x80000,0x60000,0x600080,0x1000000,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x0,0x0,0x0,0x0,0x0,0x0,0x100,0x100,0x0,0x20,0x0,0x0,0x0,0x0,};
   }

  /** Constructor with InputStream. */
  public Parser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public Parser(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new ParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 14; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 14; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public Parser(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new ParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 14; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 14; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public Parser(ParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 14; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(ParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 14; i++) jj_la1[i] = -1;
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[41];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 14; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 41; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

}
